<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.liuzemin.server.framework.security.program.dao.IProgramDao">

    <sql id="find_columns">
        id
        as id, program_name as programName, status as status, scope as scope, creation_date as creationDate,
		created_by as createdBy, last_update_date as lastUpdateDate, last_updated_by as lastUpdatedBy
    </sql>

    <sql id="condition">
        <if test='id != null'>
            and id = #{id, jdbcType=BIGINT}
        </if>
        <if test='programName != null and programName != ""'>
            and instr(program_name, #{programName, jdbcType=VARCHAR}) > 0
        </if>
        <if test='scope != null and scope != ""'>
            and scope = #{scope, jdbcType=VARCHAR}
        </if>
        <if test='status != null'>
            and status = #{status, jdbcType=INTEGER}
        </if>
        <if test='programIds != null and programIds.size > 0'>
            and id in
            <foreach collection="programIds" separator="," index="index" item="item" open="(" close=")">
                #{programIds[${index}] jdbcType=BIGINT}
            </foreach>
        </if>
    </sql>

    <sql id="page_condition">
        <if test='arg0.id != null'>
            and t1.id = #{arg0.id, jdbcType=BIGINT}
        </if>
        <if test='arg0.programName != null and arg0.programName != ""'>
            and instr(t1.program_name, #{arg0.programName, jdbcType=VARCHAR}) > 0
        </if>
        <if test='arg0.status != null'>
            and t1.status = #{arg0.status, jdbcType=INTEGER}
        </if>
        <if test='arg0.programIds != null and arg0.programIds.size > 0'>
            and t1.id in
            <foreach collection='arg0.programIds' separator="," index="index" item="item" open="(" close=")">
                #{arg0.programIds[${index}], jdbcType=BIGINT}
            </foreach>
        </if>
    </sql>

    <select id="findPagedList" resultType="com.liuzemin.server.framework.security.program.model.Program">
        select t1.* ,t2.username as createUser
        from tpl_program_t t1
        inner join tpl_user_t t2 on t1.created_by =t2.id
        <where>
            <include refid="page_condition"></include>
        </where>
        limit #{arg1.startIndex, jdbcType=INTEGER}, #{arg1.pageSize, jdbcType=INTEGER}
    </select>

    <select id="findPagedListCount" resultType="java.lang.Long">
        select count(1)
        from tpl_program_t t1
        inner join tpl_user_t t2 on t1.created_by =t2.id
        <where>
            <include refid="page_condition"></include>
        </where>
    </select>

    <select id="findList" parameterType="com.liuzemin.server.framework.security.program.model.Program"
            resultType="com.liuzemin.server.framework.security.program.model.Program">
        select
        <include refid="find_columns"></include>
        from tpl_program_t
        <where>
            <include refid="condition"></include>
        </where>
    </select>
    <select id="findFirstLevelUnit" resultType="java.util.Map">
        select
        t1.dimension_value ,
        t2.program_name
        from
        tpl_program_item_t t1
        inner join tpl_program_t t2 on
        t1.program_id = t2.id
        where
        t1.dimension_code = 'projectUnit' and t2.type=1
        <if test=" dimensionValue !=null">
            and dimension_value = #{dimensionValue} ;
        </if>
    </select>
    <select id="findFirstLevel"  resultType="com.liuzemin.server.framework.security.program.model.Program">
        select id, program_name, type
        from tpl_program_t
        where type = 1
    </select>
    <select id="findByIdFirstLevel" resultType="com.liuzemin.server.framework.security.program.model.Program">
        select *
        from tpl_program_t
        where id = #{id}
    </select>
    <select id="findFirstLevelList" resultType="com.liuzemin.server.framework.security.program.model.Program">
        select * from tpl_program_t
        <where>
            <if test="programIds != null and programIds.size > 0">
                and id in
                <foreach collection="programIds" index="index" separator="," open="(" close=")" item="item">
                    #{programIds[${index}], jdbcType=BIGINT}
                </foreach>
            </if>
            <if test='id != null'>
                and id = #{id, jdbcType=BIGINT}
            </if>
            <if test=" type !=null">
                and type = #{type} ;
            </if>
        </where>
    </select>

    <insert id="insertList">
        insert into tpl_program_t
        (program_name, scope,type, status, creation_date, created_by, last_update_date, last_updated_by)
        values
        <foreach collection="list" item="item" separator=",">
            (
            #{item.programName, jdbcType=VARCHAR},
            #{item.scope, jdbcType=VARCHAR},
            #{item.type, jdbcType=VARCHAR},
            #{item.status, jdbcType=INTEGER},
            #{item.creationDate, jdbcType=TIMESTAMP},
            #{item.createdBy, jdbcType=BIGINT},
            #{item.lastUpdateDate, jdbcType=TIMESTAMP},
            #{item.lastUpdatedBy, jdbcType=BIGINT}
            )
        </foreach>
    </insert>

    <insert id="insert" keyProperty="id" useGeneratedKeys="true"
            parameterType="com.liuzemin.server.framework.security.program.model.Program">
        insert into tpl_program_t
        (program_name, scope, type, status, creation_date, created_by, last_update_date, last_updated_by)
        values (#{programName, jdbcType=VARCHAR},
                #{scope, jdbcType=VARCHAR},
                #{type, jdbcType=VARCHAR},
                #{status, jdbcType=INTEGER},
                #{creationDate, jdbcType=TIMESTAMP},
                #{createdBy, jdbcType=BIGINT},
                #{lastUpdateDate, jdbcType=TIMESTAMP},
                #{lastUpdatedBy, jdbcType=BIGINT})
    </insert>

    <update id="update">
        update tpl_program_t
        <set>
            <if test='programName != null and programName != ""'>
                program_name = #{programName, jdbcType=VARCHAR},
            </if>
            <if test='scope != null and scope != ""'>
                scope = #{scope, jdbcType=VARCHAR},
            </if>
            <if test='type != null'>
                type = #{type, jdbcType=VARCHAR},
            </if>
            <if test='status != null'>
                status = #{status, jdbcType=INTEGER},
            </if>
            <if test='creationDate != null'>
                creation_date = #{creationDate, jdbcType=TIMESTAMP},
            </if>
            <if test='createdBy != null'>
                created_by = #{createdBy, jdbcType=BIGINT},
            </if>
            <if test='lastUpdateDate != null'>
                last_update_date = #{lastUpdateDate, jdbcType=TIMESTAMP},
            </if>
            <if test='lastUpdatedBy != null'>
                last_updated_by = #{lastUpdatedBy, jdbcType=BIGINT},
            </if>
        </set>
        where id = #{id, jdbcType=BIGINT}
    </update>

    <update id="updateList">
        <foreach collection="list" item="item">
            update tpl_program_t
            <set>
                program_name = #{item.programName, jdbcType=VARCHAR},
                scope = #{item.scope, jdbcType=VARCHAR},
                type = #{item.type, jdbcType=VARCHAR},
                status = #{item.status, jdbcType=INTEGER},
                creation_date = #{item.creationDate, jdbcType=TIMESTAMP},
                created_by = #{item.createdBy, jdbcType=BIGINT},
                last_update_date = #{item.lastUpdateDate, jdbcType=TIMESTAMP},
                last_updated_by = #{item.lastUpdatedBy, jdbcType=BIGINT},
            </set>
            where id = #{item.id, jdbcType=BIGINT};
        </foreach>
    </update>

    <delete id="delete">
        delete
        from tpl_program_t
        where id = #{id, jdbcType=BIGINT}
    </delete>

    <delete id="deleteList">
        delete from tpl_program_t
        where id in
        <foreach collection="list" item="item" separator="," open="(" close=")" index="index">
            #{list[${index}], jdbcType=BIGINT}
        </foreach>
    </delete>
</mapper>
